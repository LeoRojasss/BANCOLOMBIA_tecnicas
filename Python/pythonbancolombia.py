# -*- coding: utf-8 -*-
"""pythonbancolombia.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JF9m0h2-ow4GZEs3_yFd_uHPDfdQCQwT
"""

#python pandassss bancolombia#

import pandas as pd



# Cargar cada archivo en un DataFrame de pandas
df_obligaciones = pd.read_excel("obligaciones_clientes.xlsx")
df_tasas = pd.read_excel("tasas_productos.xlsx")

# Visualizar las primeras filas de cada DataFrame
print("Obligaciones Clientes:")
print(df_obligaciones.head())

print("\nTasas Productos:")
print(df_tasas.head())

# Función para extraer el nombre del producto
def extraer_nombre_producto(id_producto):
    if ' - ' in id_producto:
        partes = id_producto.split(' - ')
        if len(partes) > 1 and '-' in partes[1]:
            return partes[1].split('-')[1].strip()
        else:
            return partes[1].strip()
    elif ' – ' in id_producto:  # Para los casos como RLP – cartera
        return id_producto.split(' – ')[1].strip()
    else:
        return id_producto.strip()

# Aplicar la función al campo id_producto para extraer el nombre del producto
df_obligaciones['nombre_producto'] = df_obligaciones['id_producto'].apply(extraer_nombre_producto)

# Verificar los resultados
print(df_obligaciones[['id_producto', 'nombre_producto']].head())

# Función para asignar la tasa correcta según el nombre del producto
def asignar_tasa(nombre_producto, df_tasas):
    if 'cartera' in nombre_producto.lower():
        return df_tasas['tasa_cartera'].values[0]
    elif 'tarjeta' in nombre_producto.lower():
        return df_tasas['tasa_tarjeta'].values[0]
    elif 'operacion_especifica' in nombre_producto.lower():
        return df_tasas['tasa_operacion_especifica'].values[0]
    elif 'factoring' in nombre_producto.lower():
        return df_tasas['tasa_factoring'].values[0]
    elif 'leasing' in nombre_producto.lower():
        return df_tasas['tasa_leasing'].values[0]
    elif 'hipotecario' in nombre_producto.lower():
        return df_tasas['tasa_hipotecario'].values[0]
    else:
        return None  # Si no se encuentra coincidencia, devolver None

# Aplicar la función para asignar tasas a cada obligación
df_obligaciones['tasa'] = df_obligaciones['nombre_producto'].apply(lambda x: asignar_tasa(x, df_tasas))

# Verificar los resultados
print(df_obligaciones[['nombre_producto', 'tasa']].head())

# Función para calcular la tasa efectiva
def calcular_tasa_efectiva(tasa, periodicidad):
    if periodicidad == 0 or pd.isna(periodicidad):
        return None  # Evitar divisiones por 0 o datos nulos
    n = 12 / periodicidad
    return (1 + tasa)**(1/n) - 1

# Calcular la tasa efectiva usando la columna 'cod_periodicidad'
df_obligaciones['tasa_efectiva'] = df_obligaciones.apply(lambda row: calcular_tasa_efectiva(row['tasa'], row['cod_periodicidad']), axis=1)

# Verificar los resultados
print(df_obligaciones[['nombre_producto', 'tasa', 'cod_periodicidad', 'tasa_efectiva']])

# Verificar la distribución de valores en cod_periodicidad
print(df_obligaciones['cod_periodicidad'].value_counts())

# Calcular el valor final
df_obligaciones['valor_final'] = df_obligaciones['valor_inicial'] * df_obligaciones['tasa_efectiva']

# Verificar los resultados
print(df_obligaciones[['nombre_producto', 'valor_inicial', 'tasa_efectiva', 'valor_final']].head())

# Acceder a la fila en la posición 2000
fila_2000 = df_obligaciones.iloc[2000]

# Mostrar los datos del cliente en la fila 2000
print(fila_2000)

# Sumar el valor final por cliente (agrupar por num_documento)
df_resultado = df_obligaciones.groupby('num_documento')['valor_final'].sum().reset_index()

# Renombrar la columna para mayor claridad
df_resultado.rename(columns={'valor_final': 'valor_final_total'}, inplace=True)

# Verificar los resultados
print(df_resultado.head())